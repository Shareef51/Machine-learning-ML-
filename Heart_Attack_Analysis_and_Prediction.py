# -*- coding: utf-8 -*-
"""Heart_Attack_Analysis_and_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N6NPcj9722CupSSwsgVrixQApLfADUEU

<a id=63></a>
### Project Content
1. [Introduction](#1)
    * 1.1 [Examining the Project Topic](#2)
    * 1.2 [Recognizing Variables In Dataset](#3)
2. [First Organization](#4)
    * 2.1 [Required Python Libraries](#5)
        * 2.1.1 [Basic Libraries](#6)
    * 2.2 [Loading The Dataset](#7)
    * 2.3 [Initial analysis on the dataset](#8)
        * 2.3.1 [Analysis Outputs(1)](#9)
3. [Preparation for Exploratory Data Analysis(EDA)](#10)
    * 3.1 [Examining Missing Values](#11)
    * 3.2 [Examining Unique Values](#12)
        * 3.2.1 [Analysis Outputs(2)](#13)
    * 3.3 [Separating variables (Numeric or Categorical)](#14)
    * 3.4 [Examining Statistics of Variables](#15)
        * 3.4.1 [Analysis Outputs(3)](#16)
4. [Exploratory Data Analysis(EDA)](#17)
    * 4.1 [Uni-variate Analysis](#18)
        * 4.1.1 [Numerical Variables(Analysis with **Distplot**)](#19)
            * 4.1.1.1 [Analysis Outputs(4)](#20)
        * 4.1.2 [Categorical Variables(Analysis with **Pie Chart**)](#21)
            * 4.1.2.1 [Analysis Outputs(5)](#22)
            * 4.1.2.2 [Examining the Missing Data According to the Analysis Result](#23)
    * 4.2 [Bi-Variate Analysis](#24)
        * 4.2.1 [Numerical Variables - Target Variable(Analysis with **FacetGrid**)](#25)
            * 4.2.1.1 [Analysis Outputs(6)](#26)
        * 4.2.2 [Categorical Variables-Target Variable(Analysis with **Count Plot**)](#27)
            * 4.2.2.1 [Analysis Outputs(7)](#28)
        * 4.2.3 [Examining Numeric Variables Among Themselves(Analysis with **Pair Plot**)](#29)
            * 4.2.3.1 [Analysis Outputs(8)](#30)
        * 4.2.4 [Feature Scaling with the RobustScaler Method](#31)
        * 4.2.5 [Creating a New DataFrame with the Melt() Function](#32)
        * 4.2.6 [Numerical - Categorical Variables (Analysis with **Swarm Plot**)](#33)
            * 4.2.6.1 [Analysis Outputs(9)](#34)
        * 4.2.7 [Numerical - Categorical Variables (Analysis with **Box Plot**)](#35)
            * 4.2.7.1 [Analysis Outputs(10)](#36)   
        * 4.2.8 [Relationships between variables(Analysis with **Heatmap**)](#37)
            * 4.2.8.1 [Analysis Outputs(11)](#38)  
5. [Preparation for Modelling](#39)
    * 5.1 [Dropping Columns with Low Correlation](#40)
    * 5.2 [Struggling Outliers](#41)
        * 5.2.1 [Visualizing outliers](#42)
            * 5.2.1.1 [Analysis Outputs(12)](#43)
        * 5.2.2 [Dealing with outliers](#44)
            * 5.2.2.1 [Trtbps Variable](#45)
            * 5.2.2.2 [Thalach Variable](#46)
            * 5.2.2.3 [Oldpeak Variable](#47)
    * 5.3 [Determining Distributions of Numeric Variables](#48)
    * 5.4 [Transformation Operations on Unsymmetrical Data](#49)
    * 5.5 [Applying One Hot Encoding Method to Categorical Variables](#50)
    * 5.6 [Feature Scaling with the RobustScaler Method for Machine Learning Algorithms](#51)
    * 5.7 [Separating Data into Test and Training Set](#52)
6. [Modelling](#53)
    * 6.1 [Logistic Regression Algorithm](#54)
        * 6.1.1 [Cross Validation](#55)
        * 6.1.2 [Roc Curve and Area Under Curve(**AUC**)](#56)
        * 6.1.3 [Hyperparameter Optimization(**With GridSearchCV**)](#57)
    * 6.2 [Decision Tree Algorithm](#58)
    * 6.3 [Support Vector Machine Algorithm](#59)
    * 6.4 [Random Forest Algorithm](#60)
        * 6.4.1 [Hyperparameter Optimization(**With GridSearchCV**)](#61)
7. [Project **Conclusion**](#62)

### 1. Introduction <a id = 1 ></a>
[Go to Project Content](#63)

#### 1.1 Examining the Project Topic <a id = 2 ></a>

#### What is Heart Attack?

* The medical name of heart attack is ‚ÄúMyocardial infarction‚Äù.
* Heart attack in short; It is the occlusion of the vessel by plaque-like lesions filled with cholesterol and fat.
* The lesion is called abnormal conditions that occur in the organs where the disease is located.
* As a result of the blockage, the blood flow is completely cut off and a heart attack that can lead to death occurs.

#### How does a heart attack occur?

* The heart is a powerful pump that pumps blood throughout the body 60-80 times per minute at rest.
* While meeting the blood needs of the whole body, it also needs to be fed and taken blood.
* These vessels that feed the heart itself are called coronary arteries.
* Coronary insufficiency occurs when there is a disruption in the circulation of the coronary arteries.
* The cases of coronary insufficiency vary according to the type, degree and location of the stenosis in the coronary vessels.
* While some patients may have chest pain that occurs only during physical activity and is relieved by rest, sometimes a heart attack may occur as a result of sudden occlusion of the vessels, starting with severe chest pain and leading to sudden death.

#### What are the symptoms of a heart attack?

A heart attack can sneak up in different ways, and symptoms may vary between individuals‚Äîespecially between men and women. Here's a breakdown of the most common signs to watch for üö®:

### üíî Classic Symptoms
- **Chest discomfort**: Pressure, squeezing, fullness, or pain in the center of the chest that lasts more than a few minutes or goes away and comes back
- **Pain in other areas**: Discomfort may radiate to one or both arms, back, neck, jaw, or stomach
- **Shortness of breath**: Can occur with or without chest discomfort

### üò∞ Other Warning Signs
- **Cold sweat**
- **Nausea or vomiting**
- **Lightheadedness or dizziness**
- **Fatigue or unusual tiredness**
- **Rapid or irregular heartbeat**
- **Heartburn or indigestion-like sensation**

### üë©‚Äç‚öïÔ∏è Symptoms in Women
Women may experience:
- Anxiety or a sense of dread
- Pain in the shoulder, back, or arm
- Upset stomach or vomiting
- Unusual fatigue or weakness
These can occur even without chest pain

### üß† Early Warning Signs
Some heart attacks strike suddenly, but others give subtle clues days or even weeks in advance‚Äîlike recurring chest pain (angina) that doesn‚Äôt go away with rest.

#### 1.2 Recognizing Variables In Dataset <a id = 3 ></a>

**Variable definitions in the Dataset**

- **_Age_**: Age of the patient
- **_Sex:_** Sex of the patient
- **_exang:_** exercise induced angina (1 = yes; 0 = no)
- **_ca:_** number of major vessels (0-3)
- **_cp:_** Chest Pain type chest pain type
    - Value 1: typical angina
    - Value 2: atypical angina
    - Value 3: non-anginal pain
    - Value 4: asymptomatic
- **_trtbps:_** resting blood pressure (in mm Hg)
- **_chol:_** cholestoral in mg/dl fetched via BMI sensor
- **_fbs:_** (fasting blood sugar > 120 mg/dl) (1 = true; 0 = false)
- **_rest_ecg:_** resting electrocardiographic results
    - Value 0: normal
    - Value 1: having ST-T wave abnormality (T wave inversions and/or ST elevation or depression of > 0.05 mV)
    - Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria
- **_thalach:_** maximum heart rate achieved
- **_target:_** 0= less chance of heart attack 1= more chance of heart attack

**Additional variable descriptions to help us**

1. age - age in years

2. sex - sex (1 = male; 0 = female)

3. cp - chest pain type (1 = typical angina; 2 = atypical angina; 3 = non-anginal pain; 0 = asymptomatic)

4. trestbps - resting blood pressure (in mm Hg on admission to the hospital)

5. chol - serum cholestoral in mg/dl

6. fbs - fasting blood sugar > 120 mg/dl (1 = true; 0 = false)

7. restecg - resting electrocardiographic results (1 = normal; 2 = having ST-T wave abnormality; 0 = hypertrophy)

8. thalach - maximum heart rate achieved

9. exang - exercise induced angina (1 = yes; 0 = no)

10. oldpeak - ST depression induced by exercise relative to rest

11. slope - the slope of the peak exercise ST segment (2 = upsloping; 1 = flat; 0 = downsloping)

12. ca - number of major vessels (0-3) colored by flourosopy

13. thal - 2 = normal; 1 = fixed defect; 3 = reversable defect

14. num - the predicted attribute - diagnosis of heart disease (angiographic disease status) (Value 0 = < diameter narrowing; Value 1 = > 50% diameter narrowing)

Note: You can find these varaiables definitions in the discussion section of the "Heart attack analysis and prediction" dataset. [I leave the link here:](https://bit.ly/3qGQ4Pw). We thank the kaggle user Jay, who prepared the study.

### First Organization <a id = 4 ></a>
[Go to Project Content](#63)

#### 2.1 Required Python Libraries <a id = 5 ></a>

#### 2.1.1 Basic Libraries <a id = 6 ></a>
"""

# This Python 3 environment comes with many helpful analytics libraries installed

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import warnings
warnings.filterwarnings("ignore")

import matplotlib.pyplot as plt
import seaborn as sns

"""#### 2.2 Loading The Dataset <a id = 7></a>"""

df = pd.read_csv("heart.csv")

from google.colab import drive
drive.mount('/content/drive')

df.head()

"""#### 2.3 Initial analysis on the dataset <a id = 8></a>"""

df.head()

new_columns = ["age", "sex", "cp", "trtbps", "chol", "fbs", "rest_ecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "target"]

df.columns = new_columns

df.head()

print("Shape of Dataset:", df.shape)

df.info()

"""#### 2.3.1 Analysis Outputs(1) <a id = 9></a>

* The Data Set consists of 303 Rows and 14 Columns.
* The type of all the variables in the data set are in numerical format. (Integer Or Float)
* According to first impressions, there is no missing value(NaN Value) in the data set.

### 3. Preparation for Exploratory Data Analysis(EDA) <a id = 10></a>
[Go to Project Content](#63)

#### 3.1 Examining Missing Values <a id = 11></a>
"""

df.isnull().sum()

isnull_number = []
for i in df.columns:
    x = df[i].isnull().sum()
    isnull_number.append(x)

pd.DataFrame(isnull_number, index = df.columns, columns = ["Total Missing Values"])

import missingno
missingno.bar(df, color = "b")
plt.show()

"""#### 3.2 Examining Unique Values <a id = 12></a>
[Go to Project Content](#63)
"""

df.head()

df["cp"].value_counts()

df["cp"].value_counts().sum()

df["cp"].value_counts().count()

unique_number = []
for i in df.columns:
    x = df[i].value_counts().count()
    unique_number.append(x)

pd.DataFrame(unique_number, index = df.columns, columns = ["Total Unique Values"])

"""#### Analysis Outputs(2) <a id = 13></a>
* **According to the result from the unique value dataframe;**
* We determined the variables with few unique values ‚Äã‚Äãas categorical variables, and the variables with high unique values ‚Äã‚Äãas numeric variables.
* In this context, **Numeric Variables:** ‚Äúage‚Äù, ‚Äútrtbps‚Äù, ‚Äúchol‚Äù, ‚Äúthalach‚Äù and ‚Äúoldpeak ‚Äù
* **Categorical Variables:** "sex", "cp", "fbs", "rest_ecg", "exang", "slope", "ca", "thal", "target"
* In the next section, we will separate these 2 groups into 2 different lists.

#### 3.3 Separating variables (Numeric or Categorical) <a id = 14></a>
[Go to Project Content](#63)
"""

df.head()

numeric_var = ["age", "trtbps", "chol", "thalach", "oldpeak"]
categoric_var = ["sex", "cp", "fbs", "rest_ecg", "exang", "slope", "ca", "thal", "target"]

"""#### 3.4 Examining Statistics of Variables <a id = 15></a>"""

# We applied the "Describe" method to see the basic statistics of numerical data
df[numeric_var].describe()
# The analyzes we infered from the describe method are below the graphs of each variable below.

"""#### 3.4.1 Analysis Outputs(3) <a id = 16></a>
* Note: Different graphics were used in the analysis to develop visualization skills.
"""

# "age" variable
sns.distplot(df["age"], hist_kws = dict(linewidth = 1, edgecolor = "k"));

"""#### Analysis of "age" variable according to Describe() method
* The minimum value of the ages is 29, and the maximum value is 77.
* So, if we don't look at other data, only these two data should mean that the midpoint must be 53 from the mathematical operation ((29 + 77) / 2).
* The mean of the data for the age is 54. Isn't the average of the minimum and maximum values that we found just by mathematical calculations 53?
* They are almost equal to each other.
* That means the age variable has a normal distribution. The normal distribution is the ideal statistical distribution for us.
* Let's look at the quartiles.
* The data average is in the middle of the 25% and 75% quarters. This means that the age variable is prone to the normal distribution.
"""

# "trtbps" variable
sns.distplot(df["trtbps"], hist_kws = dict(linewidth = 1, edgecolor = "k"), bins = 20);

"""#### Analysis of "trtbps" variable according to Describe() method

* The minimum value for the "trtbps" variable is 94, and the maximum value is 200. The average of these two numbers is 147.
* The major average is 131.
* There is not much difference between 131 and 147. "trtbps" data tends to be normally distributed.
* However, very little data remains on the left side of 147. This means that when we take the midpoint of the minimum value and the maximum value as a basis, the data on the left is more than on the right.
* So, there will be a small queue towards the right side due to the lack of data on the right side.
* In summary, we can say that this data is prone to a normal distribution, but there is a slight right skew.

"""

# "chol" variable
sns.distplot(df["chol"], hist = False);

"""#### Analysis of "chol" variable according to Describe() method
* The minimum value for the "chol" variable is 126, and the maximum is 564. The middle of these two values is 345.
* The major average is 246.
* When viewed, the mean is slight to the left of the midpoint of the minimum and maximum value.
* Let's check the quartiles. There are values up to 274 in the first 75 percent. Considering that the maximum value is 564, we see that most of the data is on the left.
* So data is slightly skewed to the right due to values that outlier

"""

# "thalach" variable
x, y = plt.subplots(figsize = (8, 6))
sns.distplot(df["thalach"], hist = False, ax = y)
y.axvline(df["thalach"].mean(), color = "r", ls = "--");

"""#### Analysis of "thalach" variable according to Describe() method
* The minimum value of the "thalach" variable is 71. The maximum value is 202. According to these two values, the midpoint value is 137.
* The central average is 149.6
* So there is a left skew, although not much.
* When we examine the quartiles, The 25%, 50%, and 75% sections between the minimum and maximum values are homogeneously distributed.
* As a result, the data tends to be normally distributed, but there is a slight left skew.

"""

# "oldpeak" variable
x, y = plt.subplots(figsize = (8, 6))
sns.distplot(df["oldpeak"], hist_kws = dict(linewidth = 1, edgecolor = "k"), bins = 20, ax = y)
y.axvline(df["oldpeak"].mean(), color = "r", ls = "--");

"""#### Analysis of "oldpeak" variable according to Describe() method
* The minimum value of the "oldpeak" variable is 0, the maximum value is 6.20, so the middle point according to these two values is 3.10
* When we look at the mean, we see that it is 1.03
* When we examine the quartiles, 75% of the data consists of values up to 1.60
* This shows that; There is an incredible right skew in the data.

### 4. Exploratory Data Analysis(EDA) <a id = 17></a>
[Go to Project Content](#63)

#### 4.1 Uni-variate Analysis <a id = 18></a>

#### 4.1.1 Numerical Variables(Analysis with **Distplot**)<a id = 19></a>
"""

numeric_var

numeric_axis_name = ["Age of the Patient", "Resting Blood Pressure", "Cholesterol", "Maximum Heart Rate Achieved", "ST Depression"]

list(zip(numeric_var, numeric_axis_name))

import matplotlib.pyplot as plt
import seaborn as sns

title_font = {"family": "DejaVu Sans", "color": "darkred", "weight": "bold", "size": 15}
axis_font = {"family": "DejaVu Sans", "color": "darkblue", "weight": "bold", "size": 13}

for i, z in zip(numeric_var, numeric_axis_name):
    plt.figure(figsize=(8, 6), dpi=80)
    sns.histplot(df[i], bins=20, kde=True, line_kws={"linewidth":1, "color":"k"})

    plt.title(i, fontdict=title_font)
    plt.xlabel(z, fontdict=axis_font)
    plt.ylabel("Density", fontdict=axis_font)

    plt.tight_layout()
    plt.show()

"""#### 4.1.1.1 Analysis Outputs(4) <a id = 20></a>


#### Age Variable
* The vast majority of patients are between 50 and 60.
* There is a remarkable place on the chart. There is a decrease in patients between the ages of 47-and 50.
* It looks like there are no outliers in the variable.

#### Trtbps Variable
* The resting blood pressure of most patients is generally between 110 and 140.
* Values after 180 can be considered as outliers.
* There is hefty patient traffic between 115-120, 125-130, and 155-160 values.

#### Cholesterol Variable
* Cholesterol value in most patients is between 200-and 280.
* Values after 380 can be considered as outliers.

#### Thalach Variable
* The maximum heart rate achieved in most patients is between 145-and 170.
* In particular, The values before 80 can be considered outliers.

#### Oldpeak Variable
* Values of the vast majority of patients in the variable range from 0 to 1.5.
* Especially values after 2.5 can be considered as outliers.

#### 4.1.2 Categorical Variables(Analysis with **Pie Chart**) <a id = 21></a>
[Go to Project Content](#63)
"""

categoric_var

categoric_axis_name = ["Gender", "Chest Pain Type", "Fasting Blood sugar", "Resting Electrocardiographic Results",
                      "Exercise Induced Angina", "The Slope of ST Segment", "Number of Major Vessels", "Thal", "Target"]

list(zip(categoric_var, categoric_axis_name))

df["cp"].value_counts()

list(df["cp"].value_counts())

list(df["cp"].value_counts().index)

import matplotlib.pyplot as plt

title_font = {"family": "DejaVu Sans", "color": "darkred", "weight": "bold", "size": 15}
axis_font = {"family": "DejaVu Sans", "color": "darkblue", "weight": "bold", "size": 13}

for i, z in zip(categoric_var, categoric_axis_name):
    fig, ax = plt.subplots(figsize=(8, 6))

    observation_values = list(df[i].value_counts().index)
    total_observation_values = list(df[i].value_counts())

    ax.pie(total_observation_values, labels=observation_values, autopct='%1.1f%%',
           startangle=110, labeldistance=1.1)
    ax.axis("equal")  # Equal aspect ratio ensures that pie is drawn as a circle.

    plt.title(f"{i} ({z})", fontdict=title_font)
    plt.legend()
    plt.show()

"""#### 4.1.2.1 Analysis Outputs(5) <a id = 22></a>

#### Sex Variable
* **68.3%** of the patients are **male**, **31.7%** are **female**.
* So, the number of male patients is more than twice that of female patients.

#### Cp Variable
* Almost half of the patients have an observation value of 0. In other words, there is asymptomatic angina
* Half of the patients are asymptomatic; they have pain without symptoms.
* If we examine the other half of the pie chart, 1 out of 4 patients has an observation value of 2.
* In other words, atypical angina is in **29%** of the patients.
* This observation value shows patients with shortness of breath or non-classical pain.
* The other two observation values are less than the others.
* **16.5%** of patients have a value of 1. In other words, typical angina is seen. Typical angina is the classic exertion pain that comes during any physical activity.
* The other **8%** has the value of non-anginal pain, which is three types of angina.
* Non-anginal pain is the term used to describe chest pain that is not caused by heart disease or a heart attack.

#### Fbs Variable
* The vast majority of patients have an observation value of 1. In other words, **85%**.
* The fasting blood sugar of these patients is more than 120 mg/dl.
* The remaining 15 percent have a less than 120 mg/dl fasting blood glucose level.

#### Rest_ecg Variable
* The thing that draws attention to the image of this variable is that the number of patients with two observation values is negligible.
* It has a value of **1.3 percent**. When we look at all of these patients, **it is not a very important number**.
* This value represents the ST and T wavelengths of the patients.
* Another point that draws attention to this graph is; The total numbers of other patients with observation values of 1 and 0 are almost equal.
* The size of those with 1, that is, the orange part on the graph is **50.2%**
* This means that the resting electrocardiographic results of these patients are **normal**.
* The percentage of patients with a value of 0 is **48.5%**.
* That is, the patients' values of **48.5%** are **normal**.

#### Exang Variable
* We have said that this variable stands for exercise-induced angina.
* Angina is the chest pain caused by the coronary artery's involuntary contraction that feeds the heart.
* According to the variable "exang," the pain caused by this angina is represented by a value of 1 if it occurs with any exercise and 0 if it does not.
* In this context, Values 0 are more than twice as values 1. More than half of the patients do not have exercise-induced angina.

#### Slope Variable
* The minimum observation value is 0 with **7 percent**.
* This is patients with a downward slope of the ST wavelength.
* The other two observation values are almost equal to each other.
* The ST wavelength of half of the remaining patients is 1, that is straight, while the observation value of the other half is 2, that is, the ST wavelength is sloped upwards.

#### Ca variable
* This variable is the number of great vessels colored by fluoroscopy.
* In more than half of the patients, **57.8 percent**, the number of large vessels is 0. That is, the number of large vessels colored by fluoroscopy is absent.
* After 0 observation value, the other value with the most slices in the pie chart 1
* The number of large vessels observed in **21.5%** of the patients is 1
* The majority of patients have an occlusion in their veins. Therefore, large vessels cannot be observed with the fluoroscopy technique.

#### Thal Variable
* The "Thal" variable is short for the "Thallium stress test."
* The thallium stress test is simply an imaging method that evaluates the amount of blood reaching the heart muscle and determines whether a person has coronary artery disease.
* There are three observation values in the description of this variable. However, the pie chart shows four values. Values **0, 1, 2 and 3**.
* According to our research, the observation value of 0 is null. Therefore, in the next step, 0 observation values will be returned to null and filled with logical data.
* In this context, according to the thallium stress test results, **54.8 percent** of the patients have two observation values, so the test result appears to be expected.
* **36.8 percent** has a value of **3**, so we can say that this value is a reversible defect as an explanation.
* **5.9 percent** of patients have a value of **1**, so the test result for these patients is a fixed defect.

#### Target Variable
* More than half of the patients, **54.5 percent**, have a heart attack risk. The remaining **45.5 percent** have no heart attack risk.

#### 4.1.2.2 Examining the Missing Data According to the Analysis Result <a id = 23></a>
[Go to Project Content](#63)
"""

df[df["thal"] == 0]

df["thal"] = df["thal"].replace(0, np.nan)

df.loc[[48, 281], :]

isnull_number = []
for i in df.columns:
    x = df[i].isnull().sum()
    isnull_number.append(x)

pd.DataFrame(isnull_number, index = df.columns, columns = ["Total Missing Values"])

df["thal"].fillna(2, inplace = True)

df.loc[[48, 281], :]

df

df["thal"] = pd.to_numeric(df["thal"], downcast = "integer")

df.loc[[48, 281], :]

isnull_number = []
for i in df.columns:
    x = df[i].isnull().sum()
    isnull_number.append(x)

pd.DataFrame(isnull_number, index = df.columns, columns = ["Total Missing Values"])

df["thal"].value_counts()

"""#### 4.2 Bi-variate Analysis <a id = 24></a>
[Go to Project Content](#63)

#### 4.2.1 Numerical Variables - Target Variable(Analysis with FaceGrid) <a id = 25></a>
"""

numeric_var

numeric_var.append("target")

numeric_var

import seaborn as sns
import matplotlib.pyplot as plt

title_font = {"family": "DejaVu Sans", "color": "darkred", "weight": "bold", "size": 15}
axis_font = {"family": "DejaVu Sans", "color": "darkblue", "weight": "bold", "size": 13}

for i, z in zip(numeric_var, numeric_axis_name):
    graph = sns.FacetGrid(df, hue="target", height=5,
                          xlim=((df[i].min() - 10), (df[i].max() + 10)))
    graph.map(sns.kdeplot, i, fill=True)  # shade=True is deprecated ‚Üí use fill=True
    graph.add_legend()

    plt.title(i, fontdict=title_font)
    plt.xlabel(z, fontdict=axis_font)
    plt.ylabel("Density", fontdict=axis_font)

    plt.tight_layout()
    plt.show()

df[numeric_var].corr()

df[numeric_var].corr().iloc[:, [-1]]

"""#### 4.2.1.1 Analysis Outputs(6) <a id = 26></a>

#### Note :
* The **KDE plot** shows the density of the feature for each value of the target variable. There are usually two-colored humps representing the two values of the Target variable. If the humps are well-separated and non-overlapping, there is a correlation with the Target. If the humps overlap a lot, that means the feature is not well-correlated with the Target because the Target is equally as common on those values of the feature.

#### Age - Target Variable

* There is some interesting data in this chart. Typically, the general belief is that heart attack increases with age.
* However, the graph tells us that we are wrong about this.
* If you have noticed, the number of people at risk of heart attack decreases as age progresses.
* Let's take 55 as a base. There is an incredible increase in the blue graph after 55. In other words, there is a decrease in heart attack risk after the age of 55.
* On the contrary, a decrease occurs after 55 in the orange graph. In other words, there is a decrease in the risk of heart attack after the age of 55.
* To summarize, It's just a general thought that older people may be more likely to have a heart attack, but from a graph of the age and target distribution, it's clear that this isn't the case.
* And **correlation** between them **-0.225439**. There is a **negative correlation**, which we can call **little**.

#### Trtbps - Target Variable

* It is complicated to predict whether a patient will have a heart attack from resting blood pressure data.
* Because if you notice, the two graphs are almost identical.
* For example, according to the "trtbps" value of two possibilities, 130 is the maximum point.
* Also, the Bumps on the graph overlap too much.
* This means that the feature does not correlate well with the Target variable. So, in summary, A patient with a "trtbps" value of 130 may or may not be likely to have a heart attack.
* And according to the graph, we can say that there is little correlation between the two variables. **Correlation between** them **-0.144931**. There is a **negative correlation**, which we can call **little**.

#### Chol - Target Variable

* In the graph, we can say that a cholesterol value of 200-250 is precarious for the patients.
* If you have noticed, especially at the beginning of the graph, patients with and without heart attack risk a similar image, while the increase in the probability of having a heart attack from 180 to 250 is noticeable.
* After the value of 250, it becomes difficult to differentiate the probability of patients having a heart attack.
* The **correlation** between the two variables is **-0.085239**. In other words, we can say that it is **negative**, but **very little**.

#### Thalach - Target Variable

* There is a situation that is evident in this graph.
* The higher the maximum reached heart rate, the higher the probability of the patient having a heart attack.
* If you have noticed, there is a parallel increase in the two possibilities up to 150. However, after a value of 150, patients with a low probability of having a heart attack decrease, while patients with a high-risk probability increase incredibly.
* It is evident in the distinction between the two bumps in the graph. This indicates that there is a correlation between the two variables.
* The **correlation** between the two variables is **0.421741**. In other words, we can say that it is **positive** and **moderate**.

#### Oldpeak - Target Variable

* When we look at the graph, if the value of this variable is between 0 and 1.5, there is a significant increase in the probability of having a heart attack.
* We can say that the range of 0 to 1.5 is the critical threshold for us.
* It is evident in the distinction between the two bumps in the graph. This indicates a correlation between the two variables.
* The **correlation** between the two variables is **-0.430696**. In other words, we can say that it is **negative** and **moderate**.

#### 4.2.2 Categorical Variables - Target Variable(Analysis with Count Plot) <a id = 27></a>
[Go to Project Content](#63)
"""

title_font = {"family": "DejaVu Sans", "color": "darkred", "weight": "bold", "size": 15}
axis_font = {"family": "DejaVu Sans", "color": "darkblue", "weight": "bold", "size": 13}

for i, z in zip(categoric_var, categoric_axis_name):
    plt.figure(figsize=(8, 5))

    # Pass entire df and specify column with x=
    sns.countplot(data=df, x=i, hue="target")

    plt.title(f"{i} - target", fontdict=title_font)
    plt.xlabel(z, fontdict=axis_font)
    plt.ylabel("Count", fontdict=axis_font)

    plt.tight_layout()
    plt.show()

df[categoric_var].corr()

df[categoric_var].corr().iloc[:, [-1]]

"""#### 4.2.2.1 Analysis Outputs(7) <a id = 28></a>

#### Sex - Target Variable

* Patients at high risk of heart attack from women are almost more than half of those with low.
* The situation is different for those with an observation value of 1, that is, for men. The blue-colored bar has more observation values.
* So men are more likely than not to have a heart attack.
* **In summary, female patients are at higher risk for heart attack**
* The correlation between the two variables is **-0.280937**. In other words, we can say that there is a **negative low-intensity correlation**.

#### Cp - Target Variable

* First bar graph has an observation value of 0, asymptomatic pains. This pain was pain that occurred without symptoms.
* Patients with this pain are less likely to have a heart attack. When we look at the probability of not having a heart attack, we can say that it is almost three times the other.
* In the other three types of pain, having a heart attack is almost three times higher than the risk of not having it.
* **In summary, If a patient's "cp" variable is 1, 2, or 3, we can say that the risk of heart attack is high.**
* The correlation between the two variables is **0.433798**. In other words, we can say that there is **a positive, moderately strong correlation**.


#### Fbs - Target Variable

* The risk of heart attack is slightly higher in those with a 0 observation value as fasting blood sugar.
* **Patients with fasting blood sugar lower than 120 mg/dl can be positioned as risky.**
* If we look at the value of 1 observation value, the situation seems to be somewhat equal here.
* In other words, it is a little challenging to say anything definite about heart attack in patients with fasting blood sugar greater than 120 mg/dl.
* The correlation between the two variables is **-0.028046**. In other words, we can say that there is **a very low-intensity correlation in the negative direction**.


#### Rest_ecg - Target Variable

* **Attention should be paid to patients with a "rest ecg" value of 1**. Because the risk of having a heart attack is almost two times higher than that of not having a heart attack.
* The other two observation values are also more likely not to have a heart attack.
* * The correlation between the two variables is **0.137230**. In other words, we can say that there is a **positive low-intensity correlation**.

#### Exang - Target Variable

* Pain due to exercise does not affect the heart attack.
* If the patient's "exang" variable is 1, that is, if he has exercise-related angina, the probability of not having a heart attack is higher.
* In contrast, patients who do not have exercise-related angina are more likely to have a heart attack.
* **This means that exercise-related pain has nothing to do with a heart attack.**
* The correlation between the two variables is **-0.436757**. In other words, we can say that there is **a negative, moderately strong correlation**.

#### Slope - Target Variable

* **It is necessary to pay attention to the patients with a "slope" variable of 2.**
* Because patients with an observation value of 2 are three times more likely to have a heart attack than not having a heart attack.
* If we examine other values, the risk of heart attack is lower in patients with an observation values of 0 and 1.
* Especially if the observation value is 1, if it has a flat slope, we can say that it is two times more likely not to have a heart attack.
* The correlation between the two variables is **0.345877**. In other words, we can say that there is **a positive, moderately strong correlation**.

#### Ca - Target variable

* The group at risk for this variable is patients with an observation value of 0.
* If you notice, the risk of heart attack is almost three times higher in patients with an observation value of 0.
* For 1, 2, and 3 observation values, this shows the opposite situation. In other words, patients with "ca" observation values of 1, 2, and 3 are almost twice as likely to have a heart attack as those not having them.
* There is something remarkable here. Although the number of patients with a "CA" value of 4 is less than the general population, the risk of having a heart attack seems to be higher.
* The correlation between the two variables is **-0.363322**. In other words, we can say that there is **a negative, moderately strong correlation**.


#### Thal - Target Variable

* Patients with an observation value of 2 are three times more likely to have a heart attack than if they have not.
* The opposite is true for other values. The situation of not having a heart attack appears to be higher.
* The correlation between the two variables is **-0.363322**. In other words, we can say that there is **a negative, moderately strong correlation**.

#### 4.2.3 Examining Numeric Variables Among Themselves(Analysis with **Pair Plot**) <a id = 29></a>
[Go to Project Content](#63)
"""

numeric_var

numeric_var.remove("target")

df[numeric_var].head()

graph = sns.pairplot(df[numeric_var], diag_kind = "kde")
graph.map_lower(sns.kdeplot, levels = 4, color = ".2")
plt.show()

"""#### 4.2.3.1 Analysis Outputs(8) <a id = 30></a>

#### Note :

*  The **pair plot** allows us to see both distribution of single variables and relationships between two variables. Pair plots are a great method to identify trends for follow-up analysis.

* The **scatter plot**; is a drawing or mathematical diagram that typically uses Cartesian coordinates to display the values of two variables in a dataset. If the points are close to each other and have a regular appearance in terms of their directions, we can say a strong connection between the two variables. There is a directly proportional relationship between two variables in positive directional relationships. An increase in one variable causes an increase in the other variable. In negative relationships, there is an inversely proportional relationship between the variables. When the value of one variable decreases, the other variable also decreases.

#### Age Variable

* The age variable with the most relationship is the "thalach" variable.
* There is a collection of points extending in the southwest direction.
* There is a negative correlation since the points are pointing downwards.
* However, since the points are somewhat scattered, this correlation is moderate.

#### Trtbps Variable

* The relationship between "Trtbps" and other variables is weak.
* There is clutter in the graphics in general.
* With the age variable, the dots appear a little more often. There is a positive correlation.
* The lowest correlation is with the "thalach" variable. The dots are incredibly messy. There is no smooth distribution.

#### Chol Variable

* The variables that have the highest correlation with the variable "chol" are "age" and "trtbps".
* However, the relationship between the "age" variable is slightly higher.
* So cholesterol increases with age.
* There is almost no relationship with other variables.

#### Thalach Variable

* The age variable has the most relationship with the Thalach variable. There seems to be a moderately negative relationship.
* There is not much correlation between the variable "trtbps" and "chol". The dots are too scattered.
* When we look at the relationship with the "old peak" variable, we can say a close relationship with the middle level.

#### Oldpeak Variable

* We cannot find an explicit expression when interpreting the graphics of this variable because the relationship with all variables is similar to each other.
* However, we can say this in general: There is a close relationship with moderate with all variables.

#### 4.2.4 Feature Scaling with the RobustScaler Method <a id = 31></a>
[Go to Project Content](#63)
"""

from sklearn.preprocessing import RobustScaler

robust_scaler = RobustScaler()

scaled_data = robust_scaler.fit_transform(df[numeric_var])

scaled_data

type(scaled_data)

df_scaled = pd.DataFrame(scaled_data, columns = numeric_var)
df_scaled.head()

"""#### 4.2.5 Creating a New DataFrame with the Melt() Function <a id = 32></a>"""

df_new = pd.concat([df_scaled, df.loc[:, "target"]], axis = 1)

df_new.head()

melted_data = pd.melt(df_new, id_vars = "target", var_name = "variables", value_name = "value")

melted_data

plt.figure(figsize = (8, 5))
sns.swarmplot(x = "variables", y = "value", hue = "target", data = melted_data)
plt.show()

"""#### 4.2.6 Numerical Variables - Categorical Variables (Analysis with **Swarm Plot**) <a id = 33></a>
[Go to Project Content](#63)
"""

axis_font = {"family" : "DejaVu Sans", "color" : "black", "weight" : "bold", "size" : 14}
for i in df[categoric_var]:
    df_new = pd.concat([df_scaled, df.loc[:, i]], axis = 1)
    melted_data = pd.melt(df_new, id_vars = i, var_name = "variables", value_name = "value")

    plt.figure(figsize = (8, 5))
    sns.swarmplot(x = "variables", y = "value", hue = i, data = melted_data)

    plt.xlabel("variables", fontdict = axis_font)
    plt.ylabel("value", fontdict = axis_font)

    plt.tight_layout()
    plt.show()

"""#### 4.2.6.1 Analysis Outputs(9) <a id = 34></a>

#### Note:
* The **swarm plot** is a scatter plot used to represent categorical values. It is very similar to the strip plot, but it avoids overlapping points. It is not advisable to use this type of graph when the sample size is large.

#### Sex - Numeric Variables

* Colors are intertwined between "sex" and other numerical variables in the graphics. It isn't easy to distinguish.
* In summary, the relationship between the categorical "sex" variable and the numerical variables is weak.

#### Cp - Numeric Variables

* The variable that has the most relationship with the "cp" variable is the "thalach" variable. Each color appears in separate clusters, albeit slightly.
* In particular, individuals with an observation value of 0 appear distinctive.
* So chest pain has a moderate correlation with maximum attained heart rate.
* Observation units from other variables are intertwined. So there doesn't seem to be much correlation.

#### Fbs - Numeric Variables

* Variables in orange in this graph have a small number. And this color is very scattered in the blue color.
* Therefore, no variable has a very high correlation between the "Fbs"

#### Rest_ecg - Numeric Variables

* There is no strong relationship between the "rest_ecg" variable and the numeric variables due to the complexity of the colors in the chart.

#### Exang - Numeric Variables

* The numerical variable that exercise-induced chest pain is most associated with is the "thalach" variable. Orange dots are clustered below, blue dots above.
* There is a better relationship between the "exang" and the old peak variables than the other. Of course, it is not as much as the "thalach" variable, but we can say that there is a moderate correlation.
* Colors look very messy in the graphs of other variables. Therefore, there is a low correlation between them.

#### Slope - Numeric Variables

* The variables that the Slope variable has the most vital relationship with are the "thalach" and "old peak" variables. In these two variables, the colors can be observed separately.
* The same is not the case when we control the other three variables. The colors are very homogeneously distributed. It isn't straightforward to distinguish. We can say that there is a low correlation.

#### Ca - Numeric Variables

* The variables with which the "Ca" variable is correlated are the "age", "thalach," and "old peak" variables. A distinction can be seen between these variables.
* However, there is not a very strong correlation. We can say that it is below the middle level.

#### Thal - Numeric Variables

* It seems to have a little more to do with "old peak". The same is valid with the "thalach" variable. The colors look a little more evenly clustered.

#### Target - Numeric Variables

* The numerical variables with which the "target" variable has the most relationship are the "thalach" and "old peak" variables. Colors appear clustered.
* Because the colors are distributed homogeneously in other variables, there is not much relationship between them. We can say that there is a low-level correlation.

#### 4.2.7 Numerical Variables - Categorical Variables (Analysis with **Box Plot**) <a id = 35></a>
[Go to Project Content](#63)
"""

axis_font = {"family" : "DejaVu Sans", "color" : "black", "weight" : "bold", "size" : 14}
for i in df[categoric_var]:
    df_new = pd.concat([df_scaled, df.loc[:, i]], axis = 1)
    melted_data = pd.melt(df_new, id_vars = i, var_name = "variables", value_name = "value")

    plt.figure(figsize = (8, 5))
    sns.boxplot(x = "variables", y = "value", hue = i, data = melted_data)

    plt.xlabel("variables", fontdict = axis_font)
    plt.ylabel("value", fontdict = axis_font)

    plt.tight_layout()
    plt.show()

"""#### 4.2.7.1 Analysis Outputs(10) <a id = 36></a>

#### Sex - Numeric Variables

* There is no very high correlation between "sex" and numerical variables. There is a weak relationship with all of them.
* When the boxes of the observation values ‚Äã‚Äãof the gender variable are examined, it is seen that it is difficult to distinguish from each other.

#### Cp - Numeric Variables

* There is a relationship between the "cp" and the "thalach" variables. The median of the blue box displays a shape outside of all the other boxes. * * In general, although there is not much difference between the Boxes, we can say that they have a higher relationship than the others.
* So, "cp", that is, chest pain, has a higher correlation with the maximum heart rate achieved.
* The relationship with other variables is weak.

#### Fbs - Numeric Variables

* In general, it isn't easy to do between boxes. The median values ‚Äã‚Äãintersect with each other's boxes.
* Therefore, we can directly say a weak relationship between the "fbs" variable and the numerical variables.

#### Rest_ecg - Numeric Variables

* There is a point to be noted here. When we look directly at the box plot graph, the "slope" variable seems to have a high correlation with the "thalach" and "old peak" variables. The green boxes stand apart from the others and are noticeable because of their separation.
* The green box represents patients with Hypertrophy. However, the number of these patients is deficient compared to others. In other words, we can say that it is a number that will not affect the main result when we consider the general.
* In this context, we should evaluate without considering the green boxes while making our evaluation here.
* When we interpret it that way, we see no strong relationship between the slope variable and other variables.
* Because the median values of the patients whose observation values are 0 and 1, that is, of the blue and orange boxes, cut each other's boxes. It is challenging to make a distinction.
* In summary, we can say that the relationship between the "rest ecg" variable and the numerical variables is weak.

#### Exang - Numeric Variables

* There is a correlation between the "Exang" and "Thalach" variables. A clear distinction can be made between the boxes.
* They have a similar relationship with the "old peak" variable.
* There does not appear to be a relationship with the other three numerical variables.

#### Slope - Numeric Variables

* There is a relationship between "slope" and "old peak". The difference between the boxes of the observation values is evident.
* We reached the same conclusion when we analyzed it with the "swarm plot". We said that there is a relationship between them. However, it did not appear so clearly. From here, we can be sure.
* It is difficult to understand the relationship between other variables by looking at this graph. Collaborative work can be done with the swarm plot.

#### Ca - Numeric Variables

* In general, there is no strong correlation between the "CA" variable and the numerical variables.
* However, if we evaluate them among themselves, the age variable seems more related than the others. The separation of the observation values ‚Äã‚Äãfrom each other is visible.
* In the "trtbps" and "chol" variables, the medians are too much in each other. So there is not much of a distinction. We can say that the correlation between these two variables is low.

#### Thal - Numeric Variables

* The variables that have the most relationship with the "thal" variable are the "old peak" and "thalach" variables. The median of the orange box stands outside the other two color boxes.
* This is not so common in other variables. The median values of other variables generally intersect with each other. That's why there isn't much of a relationship.

#### Target - Numeric Variables

* In the "old peak" variable, the median value of the orange box goes outside the blue box. In other words, it shows that there is a more significant relationship between the "old peak" variable and the target compared to other numerical variables. We can say that there is a medium level of correlation.
* There is also a correlation between the "thalach" and the target variables. Again, the median of the orange box goes outside the blue box. This is an indication that there is a correlation compared to the others.
* When we examine the other three variables, there is not much correlation.

#### 4.2.8 Relationships between variables(Analysis with Heatmap) <a id = 37></a>
[Go to Project Content](#63)
"""

df_scaled

df_new2 = pd.concat([df_scaled, df[categoric_var]], axis = 1)

df_new2

df_new2.corr()

plt.figure(figsize = (15, 10))
sns.heatmap(data = df_new2.corr(), cmap = "Spectral", annot = True, linewidths = 0.5)

"""#### 4.2.8.1 Analysis Outputs(11) <a id = 38></a>

#### Age Variable

* The variable with the highest correlation with the "age" variable is the "thalach" variable. There is a negative correlation between them, which we can call moderately.
* The severity of the correlation is -0.40. In other words, there is an inverse relationship between the "age" and "thalach" variables.
* If we make a quick assessment in this context, we can say that the amount of heart rate reached decreases as age increases because there is an inverse proportion between them.

#### Trtbps Variable

* The variable with the highest correlation with the "trtbps" variable is the "age" variable. The correlation between them is 0.28
* There is a positive low-intensity correlation.

#### Chol Variable

* The variable with the highest correlation with the "chol" variable is the "age" variable
* There is a correlation with a magnitude of 0.21. This is a low positive correlation.
* So, we can say that as age increases, cholesterol also increases.

#### Thalach Variable

* The variable with the highest correlation to the "Thalach" variable is the "target" variable.
* There is a 0.42 positive and moderate correlation between them. In other words, it is a variable that can directly trigger a heart attack.
* There is a variable with which this variable has many correlations.
* It means that the maximum heart rate reached maybe a situation triggered by other variables.

#### Oldpeak Variable

* It has the most significant correlation ratio among this changing table. This correlation is -0.58 with the "slope" variable.
* There is a negative correlation between them, which is slightly above medium intensity.
* The most significant correlation after the "slope" variable is with the "target" variable.

#### Sex Variable

* There is no robust correlation between the variable "Sex" and other variables.
* The highest figure is -0.28 with the target variable. There is a negative low-intensity correlation between them.

#### Cp Variable

* Cp variable captures the high correlation with "thalach", "exang", and "target" variables.
* The highest is again the "target" variable. There is a direct proportion between them.

#### Fbs Variable

* The "Fbs" variable generally does not correlate with other variables.
* The highest correlation with 0.18 belongs to the "trtbps" variable. There is a low positive correlation.
* But we can say that when fasting blood sugar increases, resting blood pressure also increases.

#### Rest_ecg Variable

* There is no strong correlation between the "Rest_ecg" variable and other variables.
* The highest correlation was 0.14 with the "target" variable. There is a positive low-intensity correlation.

#### Exang Variable

* The variable with the highest correlation to the exercise-induced angina variable is the target variable with -0.44
* Also, It seems to be associated with more than one variable except "target".

#### Slope Variable

* The variable with the highest correlation to the "slope" variable is the old peak variable. There is an above-moderate correlation between these two. It is the most significant relationship in the table with 0.58
* It has a moderate correlation with the variables "thalach" and "target".
* The relationship with other variables is fragile

#### Ca Variable

* The variable with which the "Ca" variable has the highest correlation is the target variable with -0.39.
* Then comes the "age" variable with 0.28. We can say that there is a low positive correlation with the age variable.

#### Thal Variable

* The variable with which the "Thal" variable has the highest correlation is the variable "target" with -0.36.
* It has not had very high correlation coefficients with other variables.

#### Target Variable

* The "target" variable correlates with more than one variable.
* In general, we can say a relationship is below the middle level.

### 5. Preparation for Modeling <a id = 39></a>
[Go to Project Content](#63)

#### 5.1 Dropping Columns with Low Correlation<a id = 40></a>
"""

df.head()

df.drop(["chol", "fbs", "rest_ecg"], axis = 1, inplace = True)

df.head()

"""#### 5.2 Struggling Outliers <a id = 41></a>

#### 5.2.1 Visualizing outliers <a id = 42></a>
"""

fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize = (20, 6))

ax1.boxplot(df["age"])
ax1.set_title("age")

ax2.boxplot(df["trtbps"])
ax2.set_title("trtbps")

ax3.boxplot(df["thalach"])
ax3.set_title("thalach")

ax4.boxplot(df["oldpeak"])
ax4.set_title("oldpeak")

plt.show()

"""#### 5.2.1.1 Analysis Outputs(12) <a id = 43></a>

#### Age Variable

* We can see the exact image we want in this variable. There are no outliers. And the box stands at the midpoint of the whiskers.

#### Trtbps Variable

* There are more outliers in the "trtbps" variable than the others.
* In terms of distribution, an image is very prone to normal distribution. The box appears near the middle of the two whiskers.

#### Thalach Variable

* There are very few outliers. There is one outlier in part under the mustache.
* There is some closeness to the normal distribution in terms of distribution, but the box is slightly shifted upwards. It means that our data is somewhat concentrated on the right.
* In summary, we can say that there is a slight left skew.

#### Oldpeak Variable

* There is no such thing as a lower whisker in the Oldpeak variable. The bottom of the box is at the level of the lower mustache. It means that the values are concentrated on the left side. So we can say that there is a queue to the right. So there is a right skew.
* If we examine the mustache at the top, we can see the outliers above the mustache.

#### 5.2.2 Dealing with outliers <a id = 44></a>
[Go to Project Content](#63)

#### 5.2.2.1 Trtbps Variable <a id = 45></a>
"""

from scipy import stats
from scipy.stats import zscore
from scipy.stats.mstats import winsorize

z_scores_trtbps = zscore(df["trtbps"])
for threshold in range(1, 4):
    print("Threshold Value: {}".format(threshold))
    print("Number of Outliers: {}".format(len(np.where(z_scores_trtbps > threshold)[0])))
    print("-------------------")

z_scores_trtbps = zscore(df["trtbps"])
for threshold in range(1, 4):
    print("Threshold Value: {}".format(threshold))
    print("Number of Outliers: {}".format(len(np.where(z_scores_trtbps < threshold)[0])))
    print("-------------------")

df[z_scores_trtbps > 2][["trtbps"]]

df[z_scores_trtbps > 2].trtbps.min()

df[df["trtbps"] < 170].trtbps.max()

winsorize_percentile_trtbps = (stats.percentileofscore(df["trtbps"], 165)) / 100
print(winsorize_percentile_trtbps)

1 - winsorize_percentile_trtbps

trtbps_winsorize = winsorize(df.trtbps, (0, (1 - winsorize_percentile_trtbps)))

plt.boxplot(trtbps_winsorize)
plt.xlabel("trtbps_winsorize", color = "b")
plt.show()

df["trtbps_winsorize"] = trtbps_winsorize

df.head()

"""#### 5.2.2.2 Thalach Variable <a id = 46></a>"""

def iqr(df, var):
    q1 = np.quantile(df[var], 0.25)
    q3 = np.quantile(df[var], 0.75)
    diff = q3 - q1
    lower_v = q1 - (1.5 * diff)
    upper_v = q3 + (1.5 * diff)
    return df[(df[var] < lower_v) | (df[var] > upper_v)]

thalach_out = iqr(df, "thalach")

thalach_out

df.drop([272], axis = 0, inplace = True)

df["thalach"][270:275]

plt.boxplot(df["thalach"]);

"""#### 5.2.2.3 Oldpeak Variable <a id = 47></a>"""

def iqr(df, var):
    q1 = np.quantile(df[var], 0.25)
    q3 = np.quantile(df[var], 0.75)
    diff = q3 - q1
    lower_v = q1 - (1.5 * diff)
    upper_v = q3 + (1.5 * diff)
    return df[(df[var] < lower_v) | (df[var] > upper_v)]

iqr(df, "oldpeak")

df[df["oldpeak"] < 4.2].oldpeak.max()

winsorize_percentile_oldpeak = (stats.percentileofscore(df["oldpeak"], 4)) / 100
print(winsorize_percentile_oldpeak)

oldpeak_winsorize = winsorize(df.oldpeak, (0, (1 - winsorize_percentile_oldpeak)))

plt.boxplot(oldpeak_winsorize)
plt.xlabel("oldpeak_winsorize", color = "b")
plt.show()

df["oldpeak_winsorize"] = oldpeak_winsorize

df.head()

df.drop(["trtbps", "oldpeak"], axis = 1, inplace = True)

df.head()

"""#### 5.3 Determining Distributions of Numeric Variables<a id = 48></a>
[Go to Project Content](#63)
"""

df.head()

fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize = (20, 6))

ax1.hist(df["age"])
ax1.set_title("age")

ax2.hist(df["trtbps_winsorize"])
ax2.set_title("trtbps_winsorize")

ax3.hist(df["thalach"])
ax3.set_title("thalach")

ax4.hist(df["oldpeak_winsorize"])
ax4.set_title("oldpeak_winsorize")

plt.show()

df[["age", "trtbps_winsorize", "thalach", "oldpeak_winsorize"]].agg(["skew"]).transpose()

"""#### 5.4 Transformation Operations on Unsymmetrical Data<a id = 49></a>"""

df["oldpeak_winsorize_log"] = np.log(df["oldpeak_winsorize"])
df["oldpeak_winsorize_sqrt"] = np.sqrt(df["oldpeak_winsorize"])

df.head()

df[["oldpeak_winsorize", "oldpeak_winsorize_log", "oldpeak_winsorize_sqrt"]].agg(["skew"]).transpose()

df.drop(["oldpeak_winsorize", "oldpeak_winsorize_log"], axis = 1, inplace = True)

df.head()

"""#### 5.5 Applying One Hot Encoding Method to Categorical Variables<a id = 50></a>
[Go to Project Content](#63)
"""

df_copy = df.copy()

df_copy.head()

categoric_var

categoric_var.remove("fbs")
categoric_var.remove("rest_ecg")

categoric_var

df_copy = pd.get_dummies(df_copy, columns = categoric_var[:-1], drop_first = True)

df_copy.head()

"""#### 5.6 Feature Scaling with the RobustScaler Method for Machine Learning Algorithms<a id = 51></a>"""

new_numeric_var = ["age", "thalach", "trtbps_winsorize", "oldpeak_winsorize_sqrt"]

robus_scaler = RobustScaler()

df_copy[new_numeric_var] = robust_scaler.fit_transform(df_copy[new_numeric_var])

df_copy.head()

"""#### 5.7 Separating Data into Test and Training Set<a id = 52></a>
[Go to Project Content](#63)
"""

from sklearn.model_selection import train_test_split

X = df_copy.drop(["target"], axis = 1)
y = df_copy[["target"]]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 3)

X_train.head()

y_train.head()

print(f"X_train: {X_train.shape[0]}")
print(f"X_test: {X_test.shape[0]}")
print(f"y_train: {y_train.shape[0]}")
print(f"y_test: {y_test.shape[0]}")

"""### 6. Modelling <a id = 53></a>

#### 6.1 Logistic Regression Algorithm <a id = 54></a>
[Go to Project Content](#63)
"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

log_reg = LogisticRegression()
log_reg

log_reg.fit(X_train, y_train)

y_pred = log_reg.predict(X_test)

y_pred

accuracy = accuracy_score(y_test, y_pred)
print("Test Accuracy: {}".format(accuracy))

"""#### 6.1.1 Cross Validation <a id = 55></a>"""

from sklearn.model_selection import cross_val_score

"""![xv_folds.gif](attachment:8ff93547-d52c-49d9-ae04-2f5fb2ceac52.gif)"""

scores = cross_val_score(log_reg, X_test, y_test, cv = 10)
print("Cross-Validation Accuracy Scores", scores.mean())

"""#### 6.1.2 Roc Curve and Area Under Curve(AUC) <a id = 56></a>"""

from sklearn.metrics import RocCurveDisplay

# Fit your model first
log_reg.fit(X_train, y_train)

# Plot ROC curve
RocCurveDisplay.from_estimator(log_reg, X_test, y_test)
plt.show()

"""![ROC CURVE.png](attachment:eda0e3c5-1c09-4a95-900f-ec045eaacbba.png)

![auc roc.png](attachment:21f77646-1e49-4793-b904-ac3bef21b651.png)

![AUC ROC RESƒ∞M.jpg](attachment:01d40f45-4027-487c-a857-b9750634e8e3.jpg)
"""

from sklearn.metrics import RocCurveDisplay

RocCurveDisplay.from_estimator(log_reg, X_test, y_test, name = "Logistic Regression")
plt.title("Logistic Regression Roc Curve And AUC")
plt.plot([0, 1], [0, 1], "r--")
plt.show()

"""#### 6.1.3 Hyperparameter Optimization(**with GridSearchCV**) <a id = 57></a>"""

from sklearn.model_selection import GridSearchCV

log_reg_new = LogisticRegression()
log_reg_new

parameters = {"penalty":["l1","l2"], "solver" : ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']}

log_reg_grid = GridSearchCV(log_reg_new, param_grid = parameters)

log_reg_grid.fit(X_train, y_train)

print("Best Parameters: ", log_reg_grid.best_params_)

log_reg_new2 = LogisticRegression(penalty = "l1", solver = "saga")
log_reg_new2

log_reg_new2.fit(X_train, y_train)

y_pred = log_reg_new2.predict(X_test)

print("The test accuracy score of Logistic Regression After hyper-parameter tuning is: {}".format(accuracy_score(y_test, y_pred)))

from sklearn.metrics import RocCurveDisplay

RocCurveDisplay.from_estimator(log_reg_new2, X_test, y_test, name = "Logistic Regression GridSearchCV")
plt.title("Logistic Regression GridSearchCV Roc Curve And AUC")
plt.plot([0, 1], [0, 1], "r--")
plt.show()

"""#### 6.2 Decision Tree Algorithm <a id = 58></a>
[Go to Project Content](#63)
"""

from sklearn.tree import DecisionTreeClassifier

dec_tree = DecisionTreeClassifier(random_state = 5)

dec_tree.fit(X_train, y_train)

y_pred = dec_tree.predict(X_test)

print("The test accuracy score of Decision Tree is:", accuracy_score(y_test, y_pred))

scores = cross_val_score(dec_tree, X_test, y_test, cv = 10)
print("Cross-Validation Accuracy Scores", scores.mean())

from sklearn.metrics import RocCurveDisplay

RocCurveDisplay.from_estimator(dec_tree, X_test, y_test, name = "Decision Tree")
plt.title("Decision Tree Roc Curve And AUC")
plt.plot([0, 1], [0, 1], "r--")
plt.show()

"""#### 6.3 Support Vector Machine Algorithm <a id = 59></a>"""

from sklearn.svm import SVC

svc_model = SVC(random_state = 5)

svc_model.fit(X_train, y_train)

y_pred = svc_model.predict(X_test)

print("The test accuracy score of SVM is:", accuracy_score(y_test, y_pred))

scores = cross_val_score(svc_model, X_test, y_test, cv = 10)
print("Cross-Validation Accuracy Scores", scores.mean())

from sklearn.metrics import RocCurveDisplay

RocCurveDisplay.from_estimator(svc_model, X_test, y_test, name = "Support Vector Machine")
plt.title("Support Vector Machine Roc Curve And AUC")
plt.plot([0, 1], [0, 1], "r--")
plt.show()

"""#### 6.4 Random Forest Algorithm <a id = 60></a>
[Go to Project Content](#63)
"""

from sklearn.ensemble import RandomForestClassifier

random_forest = RandomForestClassifier(random_state = 5)

random_forest.fit(X_train, y_train)

y_pred = random_forest.predict(X_test)

print("The test accuracy score of Random Forest is", accuracy_score(y_test, y_pred))

scores = cross_val_score(random_forest, X_test, y_test, cv = 10)
print("Cross-Validation Accuracy Scores", scores.mean())

from sklearn.metrics import RocCurveDisplay

RocCurveDisplay.from_estimator(random_forest, X_test, y_test, name = "Random Forest")
plt.title("Random Forest Roc Curve And AUC")
plt.plot([0, 1], [0, 1], "r--")
plt.show()

"""#### 6.4.1 Hyperparameter Optimization(**with GridSearchCV**) <a id = 61></a>"""

random_forest_new = RandomForestClassifier(random_state = 5)
random_forest_new

parameters = {"n_estimators" : [50, 100, 150, 200],
              "criterion" : ["gini", "entropy"],
              'max_features': ['auto', 'sqrt', 'log2'],
              'bootstrap': [True, False]}

random_forest_grid = GridSearchCV(random_forest_new, param_grid = parameters)

random_forest_grid.fit(X_train, y_train)

print("Best Parameters:", random_forest_grid.best_params_)

random_forest_new2 = RandomForestClassifier(bootstrap = True, criterion = "entropy", max_features = "auto", n_estimators = 200, random_state = 5)

random_forest_new2 = RandomForestClassifier(bootstrap = True, criterion = "entropy", max_features = "sqrt", n_estimators = 200, random_state = 5)

y_pred = random_forest_new2.predict(X_test)

print("The test accuracy score of Random Forest after hyper-parameter tuning is:", accuracy_score(y_test, y_pred))

from sklearn.metrics import RocCurveDisplay

RocCurveDisplay.from_estimator(random_forest_new2, X_test, y_test, name = "Random Forest")
plt.title("Random Forest Roc Curve And AUC")
plt.plot([0, 1], [0, 1], "r--")
plt.show()

"""### 7. Project Conclusion <a id = 62></a>

**The activities we carried out within the scope of the project are as follows:**
1. Within the scope of the project, we first made the data set ready for **Exploratory Data Analysis(EDA)**
2. We performed **Exploratory Data Analysis(EDA)**.
3. We analyzed numerical and categorical variables within the scope of univariate analysis by using **Distplot** and **Pie Chart** graphics.
4. Within the scope of bivariate analysis, we analyzed the variables among each other using **FacetGrid, Count Plot, Pair Plot, Swarm plot, Box plot, and Heatmap** graphics.
5. We made the data set ready for the model. In this context, we struggled with **missing** and **outlier** values.
6. We used **four different algorithms** in the model phase.
7. We got **87% accuracy** and **88% AUC** with the **Logistic Regression model**.
8. We got **83% accuracy** and **85% AUC** with the **Decision Tree Model**.
9. We got **83% accuracy** and **89% AUC** with the **Support Vector Classifier Model**.
10. And we got **90.3% accuracy** and **93% AUC** with the **Random Forest Classifier Model**.
11. When all these model outputs are evaluated, we **prefer** the model we created with the **Random Forest Algorithm**, which gives the **best results**.
**See you in the next project.**

[Go to Project Content](#63)
"""